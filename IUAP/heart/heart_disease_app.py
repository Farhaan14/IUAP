# -*- coding: utf-8 -*-
"""heart_disease_app.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/157YVvd-cLgE9x9ydXcyYP4kA8KcOW_CF
"""

import numpy as np
import pickle
import streamlit as st

# Load ML model
model = pickle.load(open('model.pkl', 'rb')) 

def predict(age,sex,chest_pain,rest_bp,serum_cl,fast_bs,rest_ecg,max_hr,st_dep,ex_ag,slope,ves_nm,tha):
    if sex == "Male":
        sex = 1
    else:
        sex = 0

    if fast_bs == False:
        fast_bs = 0
    else:
        fast_bs = 1
 
    if rest_ecg == "left ventricular hypertrophy":
        rest_ecg = 0
    elif rest_ecg == "normal":
        rest_ecg = 1 
    else:
        rest_ecg = 2

    if slope == "downsloping":
        slope = 0
    elif slope == "flat":
        slope = 1
    else:
        slope = 2
    
    if ex_ag == "No":
        ex_ag = 0
    else:
        ex_ag = 1

    if tha == "fixed defect":
        tha = 1
    elif tha == "normal":
        tha = 2
    else:
        tha = 3
     
    if chest_pain == "asymptomatic":
        chest_pain = 0
    elif chest_pain == "atypical angina":
        chest_pain = 1    
    elif chest_pain == "non-anginal pain":
        chest_pain = 2
    else:
    	chest_pain = 3


    values=[age,sex,chest_pain,rest_bp,serum_cl,fast_bs,rest_ecg,max_hr,st_dep,ex_ag,slope,ves_nm,tha]
    
    # Put all form entries values in a list 
    features = [float(i) for i in values]
    # Convert features to array
    array_features = [np.array(features)]
    # Predict features
    prediction = model.predict(array_features)    
    output = prediction    
    # Check the output values and retrive the result with html tag based on the value
    if output == 1:
        st.text("The patient is not likely to have heart disease!")
    else:
        st.text("The patient is likely to have heart disease!")
def main():
    age = st.number_input('Age')
    sex = st.selectbox('Gender',("Male","Female"))
    chest_pain = st.selectbox('Chest Pain Type',("asymptomatic","typical angina","typical angina","non-anginal pain"))
    rest_bp = st.number_input("Resting Blood Pressure in mm Hg")
    serum_cl = st.number_input("Serum Cholestoral in mg/dl")
    fast_bs = st.selectbox("Fasting Blood Sugar",(False,True))
    rest_ecg = st.selectbox("Resting ECG Results",("normal","Having ST-T wave abnormality","left ventricular hypertrophy"))
    max_hr = st.number_input("Maximum Heart Rate")
    st_dep = st.number_input("ST Depression Induced")
    ex_ag = st.selectbox("Exercise Induced Angina ",("No","Yes"))
    slope = st.selectbox("Slope of the Peak Exercise ST Segment",("unsloping","flat","downsloping"))
    ves_nm = st.selectbox("Number of Vessels Colored by Flourosopy",(0,1,2,3))
    tha = st.selectbox("Thalassemia",("fixed defect","normal","reversable defect"))
    
    if st.button("Predict"):
        predict(age,sex,chest_pain,rest_bp,serum_cl,fast_bs,rest_ecg,max_hr,st_dep,ex_ag,slope,ves_nm,tha)



if __name__ == '__main__':
#Run the application
    main()
